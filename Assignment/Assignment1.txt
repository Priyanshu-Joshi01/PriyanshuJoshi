package Java;
import java.util.Arrays;
import java.util.Scanner;

public class StringOperation {
    //Method to append a string in the given string 
    public static String append(String str, String toAppend) {
        
        
        return str+" "+toAppend;
    } 
    //Methord to count the number of word in the Syring 
    public static int count(String str)
    {
       int length=str.length();
       int count=0;
       for(int i=0;i<length;i++)
       {
        char c = str.charAt(i);
        //if condition for skipping spaces 
        if(c!=' ')
        {
            count++;

        }
        

       }
       return count;

    }
    //Methord to replace a word in the string with a new word
    public static String replace(String str,String oldword,String newword)
    {
        String result = "";
        String temp = "";

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            if (ch != ' ') {
                temp = temp + ch;
            } else {
                if (temp.equals(oldword)) {
                    result = result + newword + " ";
                } else {
                    result = result + temp + " ";
                }
                temp = "";
            }
        }
        //The for loop only processes words that are followed by a space. The last word in the string
        if (temp.equals(oldword)) {
            result = result + newword;
        } else {
            result = result + temp;
        }

    return result;
    }

    //Methord to check if the give string is palindrome or not 
    public static Boolean isPalindrome(String str)
    {
        
        String text=str.replaceAll("\\s+", "").toLowerCase();//Remove spaces and convert the string to lower case
        int left=0;
        int right=text.length()-1;
        while(left<right)
        {

            if(text.charAt(left)!=text.charAt(right))
            {
                //The string is not a palindrome is the char at i and length-i is not same
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
    //Methord to splice the give string form the start point given
    public static String splice(String str, int start, int length) 
    {
        
        if (start < 0 || start >= str.length()) return "Invalid start index!";//check if the given length to slice is not greater then the given string
        String result = "";
        for (int i = 0; i < str.length(); i++) {
            if (i < start || i >= start + length) {
                result += str.charAt(i);//adding each char from start to start+length to a string result
            }
        }
        return result;
    }
    //Methord to split the give string according to spaces
    public static void split(String str)
    {
        String word = "";
        System.out.println("Splitted string:");

        for (int i = 0; i < str.length(); i++)
        {
            char ch = str.charAt(i);

            if (ch != ' ')
            {
                word = word + ch;  // build word
            } 
            else 
            {
                System.out.println(word);
                word = "";         // reset for next word
            }
        }

        // print the last word 
        if (word.length() > 0) 
        {
            System.out.println(word);
        }
    }
    //Methord to find the char that is rpeated maximum time
    public static char MaxRepeatingCharacter(String str)
    {
        int maxCount = 0;
        char maxChar = ' ';
        for (int i = 0; i < str.length(); i++) {
            int count = 0;
            for (int j = 0; j < str.length(); j++) {
                if (str.charAt(i) == str.charAt(j)) count++;//if there is and other instance of the char at i then it will be counted 
            }
            if (count > maxCount)//if the count is more then the maximun count till find then change the maxCount
            {
                maxCount = count;
                maxChar = str.charAt(i);
            }
        }
        return maxChar;
    }
    
    //Methord to sort the given String according to alphabetical order
    public static String sort(String str) {
        char[] arr = str.toCharArray();
        //Bubble sorting
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - i - 1; j++) {
                if (arr[j] > arr[j + 1]) // using their ASCII/Unicode values
                {
                    char temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        String sorted = "";
        for (char c : arr) sorted += c;
        return sorted;
    }
    //Method takes a string and an integer shift amount (n)
    public static String shift(String str, int n) {
        int len = str.length();
        if (len == 0) return str;
        n = n % len;
        String shifted = "";
        for (int i = n; i < len; i++) shifted += str.charAt(i);
        for (int i = 0; i < n; i++) shifted += str.charAt(i);
        return shifted;
    }
    //Methord to reverse the given string 
    public static String reverse(String str) {
        String rev = "";//Take an another string
        for (int i = str.length() - 1; i >= 0; i--) {
            rev += str.charAt(i);
        }
        return rev;
    }
    //This is the main function
    public static void main(String[]args)
    {
        //User string input
         Scanner sc = new Scanner(System.in);
         System.out.println("Enter your string");
         String str = sc.nextLine();
        //infinite loop 
         while(true)
         {
            //Choices of operation
            System.out.println("\n=== Choose an Operation ===");
            System.out.println("1. Append");
            System.out.println("2. CountWords");
            System.out.println("3. Replace");
            System.out.println("4. isPalindrome");
            System.out.println("5. Splice");
            System.out.println("6. Split");
            System.out.println("7. MaxRepeatingCharacter");
            System.out.println("8. Sort");
            System.out.println("9. Shift");
            System.out.println("10. Reverse");
            System.out.println("11. Print string");
            System.out.println("12. Exit");
            System.out.print("Enter choice (1-12): ");
            int choice = sc.nextInt();
            sc.nextLine();
            //Operation selection switch case
            switch (choice) {
                case 1:
                    System.out.println("Enter text to append");
                    String toappend = sc.nextLine();

                    str = append(str, toappend);
                    break;
                case 2:
                    int count=count(str);
                    System.out.println("Number of words in the string: "+count);
                    break;
                case 3:
                    System.out.println("Enter the word to replace");
                    String oldword=sc.nextLine();
                    System.out.println("Enter the word to replace with");
                    String newword=sc.nextLine();
                    str=replace(str,oldword,newword);
                    break;
                case 4:
                    if(isPalindrome(str)==true)
                    {
                        System.out.println("The String is palindrome");
                    }
                    else
                    {
                        System.out.println("The String is not palindrome");
                    }
                    break;
                case 5:
                    System.out.print("Enter start index: ");
                    int start = sc.nextInt();
                    System.out.print("Enter length: ");
                    int length = sc.nextInt();
                    sc.nextLine();
                    str = splice(str, start, length);
                    break;

                case 6:
                    split(str);
                    break;
                case 7:
                    char maxfreq=MaxRepeatingCharacter(str);
                    
                    System.out.println("Maximum repeated character is:"+maxfreq);
                    break;
                case 8:
                    str = sort(str);
                    break;

                case 9:
                    System.out.print("Enter shift value: ");
                    int sh = sc.nextInt();
                    sc.nextLine();
                    str = shift(str, sh);
                    break;

                case 10:
                    str = reverse(str);
                    break;
        
                    
                
                case 11:
                    System.out.println("String is:"+str);
                    break;
                
                
                case 12:
                    return;

                default:
                    break;
            }
            
            
            


         }
    }
    
}